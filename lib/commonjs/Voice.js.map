{"version":3,"sources":["Voice.tsx"],"names":["Voice","EventEmitter","constructor","nativeVoiceEvent","type","handler","_nativeEventHandler","Error","Constants","VoiceEventCallInvite","callInvite","callInviteInfo","CallInvite","State","Pending","emit","Event","VoiceEventCallInviteAccepted","Accepted","callInfo","uuid","customParameters","sid","callSid","from","to","call","Call","CallInviteAccepted","VoiceEventCallInviteRejected","Rejected","CallInviteRejected","VoiceEventCallInviteCancelled","cancelledCallInvite","cancelledCallInviteInfo","error","errorInfo","GenericError","message","code","CancelledCallInvite","VoiceEventError","VoiceEventRegistered","Registered","VoiceEventUnregistered","Unregistered","VoiceEventAudioDevicesUpdated","audioDevices","audioDeviceInfos","selectedDevice","selectedDeviceInfo","map","audioDeviceInfo","AudioDevice","AudioDevicesUpdated","_handleError","_handleCallInvite","_handleCallInviteAccepted","_handleCallInviteRejected","_handleCancelledCallInvite","_handleRegistered","_handleUnregistered","_handleAudioDevicesUpdated","NativeEventEmitter","addListener","ScopeVoice","_handleNativeEvent","connect","token","params","NativeModule","voice_connect","getVersion","voice_getVersion","getDeviceToken","voice_getDeviceToken","getCalls","callInfos","voice_getCalls","callsMap","Map","getCallInvites","callInviteInfos","voice_getCallInvites","callInvitesMap","register","voice_register","unregister","voice_unregister","getAudioDevices","voice_getAudioDevices","showAvRoutePickerView","voice_showNativeAvRoutePicker","Listener"],"mappings":";;;;;;;AAOA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AA2SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,KAAN,SAAoBC,0BAApB,CAAiC;AACtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAME;AACF;AACA;AACA;AACEC,EAAAA,WAAW,GAAG;AACZ;;AADY;;AAAA,gDA0CgBC,gBAAD,IAAwC;AACnE,YAAM;AAAEC,QAAAA;AAAF,UAAWD,gBAAjB;AAEA,YAAME,OAAO,GAAG,KAAKC,mBAAL,CAAyBF,IAAzB,CAAhB;;AACA,UAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAClC,cAAM,IAAIE,KAAJ,CACH,6DAA4DH,IAAK,IAD9D,CAAN;AAGD;;AAEDC,MAAAA,OAAO,CAACF,gBAAD,CAAP;AACD,KArDa;;AAAA,+CA4DeA,gBAAD,IAAwC;AAClE,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUC,oBAAxC,EAA8D;AAC5D,cAAM,IAAIF,KAAJ,CACJ,0DACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AAAEM,QAAAA,UAAU,EAAEC;AAAd,UAAiCR,gBAAvC;AAEA,YAAMO,UAAU,GAAG,IAAIE,sBAAJ,CAAeD,cAAf,EAA+BC,uBAAWC,KAAX,CAAiBC,OAAhD,CAAnB;AAEA,WAAKC,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYJ,UAAtB,EAAkCF,UAAlC;AACD,KAzEa;;AAAA,uDAgFuBP,gBAAD,IAAwC;AAC1E,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUS,4BAAxC,EAAsE;AACpE,cAAM,IAAIV,KAAJ,CACJ,kEACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AAAEM,QAAAA,UAAU,EAAEC;AAAd,UAAiCR,gBAAvC;AAEA,YAAMO,UAAU,GAAG,IAAIE,sBAAJ,CACjBD,cADiB,EAEjBC,uBAAWC,KAAX,CAAiBK,QAFA,CAAnB;AAKA,YAAMC,QAAQ,GAAG;AACfC,QAAAA,IAAI,EAAET,cAAc,CAACS,IADN;AAEfC,QAAAA,gBAAgB,EAAEV,cAAc,CAACU,gBAFlB;AAGfC,QAAAA,GAAG,EAAEX,cAAc,CAACY,OAHL;AAIfC,QAAAA,IAAI,EAAEb,cAAc,CAACa,IAJN;AAKfC,QAAAA,EAAE,EAAEd,cAAc,CAACc;AALJ,OAAjB;AAQA,YAAMC,IAAI,GAAG,IAAIC,UAAJ,CAASR,QAAT,CAAb;AAEA,WAAKJ,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYY,kBAAtB,EAA0ClB,UAA1C,EAAsDgB,IAAtD;AACD,KA1Ga;;AAAA,uDAiHuBvB,gBAAD,IAAwC;AAC1E,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUqB,4BAAxC,EAAsE;AACpE,cAAM,IAAItB,KAAJ,CACJ,kEACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AAAEM,QAAAA,UAAU,EAAEC;AAAd,UAAiCR,gBAAvC;AAEA,YAAMO,UAAU,GAAG,IAAIE,sBAAJ,CACjBD,cADiB,EAEjBC,uBAAWC,KAAX,CAAiBiB,QAFA,CAAnB;AAKA,WAAKf,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYe,kBAAtB,EAA0CrB,UAA1C;AACD,KAjIa;;AAAA,wDAyIwBP,gBAAD,IAAwC;AAC3E,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUwB,6BAAxC,EAAuE;AACrE,cAAM,IAAIzB,KAAJ,CACJ,mEACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AAAE6B,QAAAA,mBAAmB,EAAEC,uBAAvB;AAAgDC,QAAAA,KAAK,EAAEC;AAAvD,UACJjC,gBADF;AAGA,YAAMgC,KAAK,GAAG,IAAIE,0BAAJ,CAAiBD,SAAS,CAACE,OAA3B,EAAoCF,SAAS,CAACG,IAA9C,CAAd;AAEA,YAAMN,mBAAmB,GAAG,IAAIO,wCAAJ,CAC1BN,uBAD0B,CAA5B;AAIA,WAAKnB,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYwB,mBAAtB,EAA2CP,mBAA3C,EAAgEE,KAAhE;AACD,KA3Ja;;AAAA,0CAkKUhC,gBAAD,IAAwC;AAC7D,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUiC,eAAxC,EAAyD;AACvD,cAAM,IAAIlC,KAAJ,CACJ,qDACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AACJ+B,QAAAA,KAAK,EAAE;AAAEI,UAAAA,IAAF;AAAQD,UAAAA;AAAR;AADH,UAEFnC,gBAFJ;AAIA,YAAMgC,KAAK,GAAG,IAAIE,0BAAJ,CAAiBC,OAAjB,EAA0BC,IAA1B,CAAd;AAEA,WAAKxB,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYT,KAAtB,EAA6B4B,KAA7B;AACD,KAjLa;;AAAA,+CAuLehC,gBAAD,IAAwC;AAClE,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUkC,oBAAxC,EAA8D;AAC5D,cAAM,IAAInC,KAAJ,CACJ,qDACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,WAAKW,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAY2B,UAAtB;AACD,KAhMa;;AAAA,iDAsMiBxC,gBAAD,IAAwC;AACpE,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUoC,sBAAxC,EAAgE;AAC9D,cAAM,IAAIrC,KAAJ,CACJ,qDACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,WAAKW,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAY6B,YAAtB;AACD,KA/Ma;;AAAA,wDAsNwB1C,gBAAD,IAAwC;AAC3E,UAAIA,gBAAgB,CAACC,IAAjB,KAA0BI,qBAAUsC,6BAAxC,EAAuE;AACrE,cAAM,IAAIvC,KAAJ,CACJ,mEACG,IAAGJ,gBAAgB,CAACC,IAAK,IAFxB,CAAN;AAID;;AAED,YAAM;AACJ2C,QAAAA,YAAY,EAAEC,gBADV;AAEJC,QAAAA,cAAc,EAAEC;AAFZ,UAGF/C,gBAHJ;AAKA,YAAM4C,YAAY,GAAGC,gBAAgB,CAACG,GAAjB,CAClBC,eAAD,IACE,IAAIC,wBAAJ,CAAgBD,eAAhB,CAFiB,CAArB;AAKA,YAAMH,cAAc,GAAG,IAAII,wBAAJ,CAAgBH,kBAAhB,CAAvB;AAEA,WAAKnC,IAAL,CAAUf,KAAK,CAACgB,KAAN,CAAYsC,mBAAtB,EAA2CP,YAA3C,EAAyDE,cAAzD;AACD,KA3Oa;;AAGZ,SAAK3C,mBAAL,GAA2B;AACzB;AACN;AACA;AACM,OAACE,qBAAUiC,eAAX,GAA6B,KAAKc,YAJT;;AAMzB;AACN;AACA;AACM,OAAC/C,qBAAUC,oBAAX,GAAkC,KAAK+C,iBATd;AAUzB,OAAChD,qBAAUS,4BAAX,GAA0C,KAAKwC,yBAVtB;AAWzB,OAACjD,qBAAUqB,4BAAX,GAA0C,KAAK6B,yBAXtB;AAYzB,OAAClD,qBAAUwB,6BAAX,GACE,KAAK2B,0BAbkB;;AAezB;AACN;AACA;AACM,OAACnD,qBAAUkC,oBAAX,GAAkC,KAAKkB,iBAlBd;AAmBzB,OAACpD,qBAAUoC,sBAAX,GAAoC,KAAKiB,mBAnBhB;;AAqBzB;AACN;AACA;AACM,OAACrD,qBAAUsC,6BAAX,GACE,KAAKgB;AAzBkB,KAA3B;;AA4BAC,+BAAmBC,WAAnB,CACExD,qBAAUyD,UADZ,EAEE,KAAKC,kBAFP;AAID;AAED;AACF;AACA;AACA;AACA;;;AAoME;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,QAAPC,OAAO,CACXC,KADW,EAEXC,MAA2B,GAAG,EAFnB,EAGI;AACf,UAAMlD,QAAQ,GAAG,MAAMmD,qBAAaC,aAAb,CAA2BH,KAA3B,EAAkCC,MAAlC,CAAvB;AAEA,UAAM3C,IAAI,GAAG,IAAIC,UAAJ,CAASR,QAAT,CAAb;AAEA,WAAOO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE8C,EAAAA,UAAU,GAAoB;AAC5B,WAAOF,qBAAaG,gBAAb,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,cAAc,GAAoB;AAChC,WAAOJ,qBAAaK,oBAAb,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACgB,QAARC,QAAQ,GAAqC;AACjD,UAAMC,SAAS,GAAG,MAAMP,qBAAaQ,cAAb,EAAxB;AACA,UAAMC,QAAQ,GAAG,IAAIC,GAAJ,CACfH,SAAS,CAAC1B,GAAV,CAAehC,QAAD,IAA8B,CAC1CA,QAAQ,CAACC,IADiC,EAE1C,IAAIO,UAAJ,CAASR,QAAT,CAF0C,CAA5C,CADe,CAAjB;AAMA,WAAO4D,QAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsB,QAAdE,cAAc,GAA2C;AAC7D,UAAMC,eAAe,GAAG,MAAMZ,qBAAaa,oBAAb,EAA9B;AACA,UAAMC,cAAc,GAAG,IAAIJ,GAAJ,CACrBE,eAAe,CAAC/B,GAAhB,CAAqBxC,cAAD,IAA0C,CAC5DA,cAAc,CAACS,IAD6C,EAE5D,IAAIR,sBAAJ,CAAeD,cAAf,EAA+BC,uBAAWC,KAAX,CAAiBC,OAAhD,CAF4D,CAA9D,CADqB,CAAvB;AAMA,WAAOsE,cAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,CAACjB,KAAD,EAA+B;AACrC,WAAOE,qBAAagB,cAAb,CAA4BlB,KAA5B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEmB,EAAAA,UAAU,CAACnB,KAAD,EAA+B;AACvC,WAAOE,qBAAakB,gBAAb,CAA8BpB,KAA9B,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACuB,QAAfqB,eAAe,GAGlB;AACD,UAAM;AACJ1C,MAAAA,YAAY,EAAEC,gBADV;AAEJC,MAAAA,cAAc,EAAEC;AAFZ,QAGF,MAAMoB,qBAAaoB,qBAAb,EAHV;AAKA,UAAM3C,YAAY,GAAGC,gBAAgB,CAACG,GAAjB,CAClBC,eAAD,IACE,IAAIC,wBAAJ,CAAgBD,eAAhB,CAFiB,CAArB;AAKA,UAAMH,cAAc,GAAG,IAAII,wBAAJ,CAAgBH,kBAAhB,CAAvB;AAEA,WAAO;AAAEH,MAAAA,YAAF;AAAgBE,MAAAA;AAAhB,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE0C,EAAAA,qBAAqB,GAAkB;AACrC,WAAOrB,qBAAasB,6BAAb,EAAP;AACD;;AApZqC;AAuZxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;MAKc5E,K;;aAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;AAAAA,IAAAA,K;KAAAA,K,KAAAA,K;;;;;4BA4DK6E,Q,KAAAA,Q,UAAAA,Q,YAAAA,Q;GAhEF7F,K,qBAAAA,K","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { EventEmitter } from 'eventemitter3';\nimport { AudioDevice } from './AudioDevice';\nimport { Call } from './Call';\nimport { CallInvite } from './CallInvite';\nimport { CancelledCallInvite } from './CancelledCallInvite';\nimport { NativeEventEmitter, NativeModule } from './common';\nimport { Constants } from './constants';\nimport { GenericError } from './error/GenericError';\nimport type { NativeAudioDeviceInfo } from './type/AudioDevice';\nimport type { NativeCallInfo } from './type/Call';\nimport type { NativeCallInviteInfo } from './type/CallInvite';\nimport type { Uuid } from './type/common';\nimport type { NativeVoiceEvent, NativeVoiceEventType } from './type/Voice';\n\n/**\n * Defines strict typings for all events emitted by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * Note that the `on` function is an alias for the `addEventListener` function.\n * They share identical functionality and either may be used interchangeably.\n *\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:namespace) | Voice namespace}.\n *\n * @public\n */\nexport declare interface Voice {\n  /**\n   * ------------\n   * Emit Typings\n   * ------------\n   */\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event, listener: (...args: any[]) => void): boolean;\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.AudioDevicesUpdated,\n    audioDevices: AudioDevice[],\n    selectedDevice: AudioDevice\n  ): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.CallInvite, callInvite: CallInvite): boolean;\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.CallInviteAccepted,\n    callInvite: CallInvite,\n    call: Call\n  ): boolean;\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.CallInviteRejected,\n    callInvite: CallInvite\n  ): boolean;\n\n  /** @internal */\n  emit(\n    voiceEvent: Voice.Event.CancelledCallInvite,\n    cancelledCallInvite: CancelledCallInvite,\n    error?: GenericError\n  ): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Error, error: GenericError): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Registered): boolean;\n\n  /** @internal */\n  emit(voiceEvent: Voice.Event.Unregistered): boolean;\n\n  /**\n   * ----------------\n   * Listener Typings\n   * ----------------\n   */\n\n  /**\n   * Generic event listener typings.\n   * @param voiceEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    voiceEvent: Voice.Event,\n    listener: Voice.Listener.Generic\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:1)} */\n  on(voiceEvent: Voice.Event, listener: Voice.Listener.Generic): this;\n\n  /**\n   * Audio devices updated event. Raised when the list of audio devices changes.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.AudioDevicesUpdated, () => {\n   *   // the list of available audio devices has changed and/or the selected\n   *   // audio device has been changed\n   * });\n   * ```\n   *\n   * @param audioDevicesUpdatedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:2)} */\n  on(\n    audioDevicesUpdatedEvent: Voice.Event.AudioDevicesUpdated,\n    listener: Voice.Listener.AudioDevicesUpdated\n  ): this;\n\n  /**\n   * Call invite event. Raised when an incoming call invite is received.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n   *   // handle the incoming call invite\n   * });\n   * ```\n   *\n   * @param callInviteEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:3)} */\n  on(\n    callInviteEvent: Voice.Event.CallInvite,\n    listener: Voice.Listener.CallInvite\n  ): this;\n\n  /**\n   * Call invite accepted event. Raised when a pending incoming call invite has\n   * been accepted.\n   *\n   * @remarks\n   * This event is raised when call invites are accepted outside of the SDK,\n   * i.e. through the native iOS or Android UI.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.CallInviteAccepted, (callInvite: CallInvite, call: Call) => {\n   *   // handle the incoming call invite and the call associated with it\n   * });\n   * ```\n   *\n   * @param callInviteAcceptedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    callInviteAcceptedEvent: Voice.Event.CallInviteAccepted,\n    listener: Voice.Listener.CallInviteAccepted\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:4)} */\n  on(\n    callInviteAcceptedEvent: Voice.Event.CallInviteAccepted,\n    listener: Voice.Listener.CallInviteAccepted\n  ): this;\n\n  /**\n   * Call invite rejected event. Raised when a pending incoming call invite has\n   * been rejected.\n   *\n   * @remarks\n   * This event is raised when call invites are rejected outside of the SDK,\n   * i.e. through the native iOS or Android UI.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.CallInviteRejected, (callInvite: CallInvite) => {\n   *   // handle the rejection of the incoming call invite\n   * });\n   * ```\n   *\n   * @param callInviteRejectedEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    callInviteRejectedEvent: Voice.Event.CallInviteRejected,\n    listener: Voice.Listener.CallInviteRejected\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:5)} */\n  on(\n    callInviteRejectedEvent: Voice.Event.CallInviteRejected,\n    listener: Voice.Listener.CallInviteRejected\n  ): this;\n\n  /**\n   * Cancelled call invite event. Raised when a pending incoming call invite has\n   * been cancelled and is no longer valid.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.CancelledCallInvite, (cancelledCallInvite: CancelledCallInvite) => {\n   *   // handle the cancellation of the incoming call invite\n   * });\n   * ```\n   *\n   * @param cancelledCallInviteEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    cancelledCallInviteEvent: Voice.Event.CancelledCallInvite,\n    listener: Voice.Listener.CancelledCallInvite\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:6)} */\n  on(\n    cancelledCallInviteEvent: Voice.Event.CancelledCallInvite,\n    listener: Voice.Listener.CancelledCallInvite\n  ): this;\n\n  /**\n   * Error event. Raised when the SDK encounters an error.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.Error, (error: TwilioError.GenericError) => {\n   *   // handle a generic Voice SDK error\n   * });\n   * ```\n   *\n   * @param errorEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    errorEvent: Voice.Event.Error,\n    listener: Voice.Listener.Error\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:7)} */\n  on(errorEvent: Voice.Event.Error, listener: Voice.Listener.Error): this;\n\n  /**\n   * Registered event. Raised when the SDK is registered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.Registered, () => {\n   *   // handle successful registration for incoming calls\n   * });\n   * ```\n   *\n   * @param registeredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:8)} */\n  on(\n    registeredEvent: Voice.Event.Registered,\n    listener: Voice.Listener.Registered\n  ): this;\n\n  /**\n   * Unregistered event. Raised when the SDK is unregistered for incoming calls.\n   *\n   * @example\n   * ```typescript\n   * voice.addEventListener(Voice.Event.Unregistered, () => {\n   *   // handle successful unregistration for incoming calls\n   * });\n   * ```\n   *\n   * @param unregisteredEvent - The raised event string.\n   * @param listener - A listener function that will be invoked when the event\n   * is raised.\n   * @returns - The call object.\n   */\n  addEventListener(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n  /** {@inheritDoc (Voice:interface).(addEventListener:9)} */\n  on(\n    unregisteredEvent: Voice.Event.Unregistered,\n    listener: Voice.Listener.Unregistered\n  ): this;\n}\n\n/**\n * Main entry-point of the Voice SDK. Provides access to the entire feature-set\n * of the library.\n *\n * @example\n * Usage:\n * ```\n * const token = '...';\n *\n * const voice = new Voice();\n *\n * voice.on(Voice.Event.CallInvite, (callInvite: CallInvite) => {\n *   callInvite.accept();\n * });\n *\n * voice.register(token);\n * ```\n *\n * @remarks\n *  - See also the {@link (Voice:namespace).Event} enum for events emitted by\n *    `Voice` objects.\n *  - See also the {@link (Voice:interface) | Voice interface} for events\n *    emitted by this class and associated types.\n *  - See also the {@link (Voice:namespace) | Voice namespace} for types and\n *    enumerations used by this class.\n *\n * @public\n */\nexport class Voice extends EventEmitter {\n  /**\n   * Handlers for native voice events. Set upon construction so we can\n   * dynamically bind events to handlers.\n   *\n   * @privateRemarks\n   * This is done by the constructor so this mapping isn't made every time the\n   * {@link (Voice:class)._handleNativeEvent} function is invoked.\n   */\n  private _nativeEventHandler: Record<\n    NativeVoiceEventType,\n    (voiceEvent: NativeVoiceEvent) => void\n  >;\n\n  /**\n   * Main entry-point of the Voice SDK. Provides access to the entire\n   * feature-set of the library.\n   */\n  constructor() {\n    super();\n\n    this._nativeEventHandler = {\n      /**\n       * Common\n       */\n      [Constants.VoiceEventError]: this._handleError,\n\n      /**\n       * Call Invite\n       */\n      [Constants.VoiceEventCallInvite]: this._handleCallInvite,\n      [Constants.VoiceEventCallInviteAccepted]: this._handleCallInviteAccepted,\n      [Constants.VoiceEventCallInviteRejected]: this._handleCallInviteRejected,\n      [Constants.VoiceEventCallInviteCancelled]:\n        this._handleCancelledCallInvite,\n\n      /**\n       * Registration\n       */\n      [Constants.VoiceEventRegistered]: this._handleRegistered,\n      [Constants.VoiceEventUnregistered]: this._handleUnregistered,\n\n      /**\n       * Audio Devices\n       */\n      [Constants.VoiceEventAudioDevicesUpdated]:\n        this._handleAudioDevicesUpdated,\n    };\n\n    NativeEventEmitter.addListener(\n      Constants.ScopeVoice,\n      this._handleNativeEvent\n    );\n  }\n\n  /**\n   * Intermediary event handler for `Voice`-level events. Ensures that the type\n   * of the incoming event is expected and invokes the proper event listener.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleNativeEvent = (nativeVoiceEvent: NativeVoiceEvent) => {\n    const { type } = nativeVoiceEvent;\n\n    const handler = this._nativeEventHandler[type];\n    if (typeof handler === 'undefined') {\n      throw new Error(\n        `Unknown voice event type received from the native layer: \"${type}\".`\n      );\n    }\n\n    handler(nativeVoiceEvent);\n  };\n\n  /**\n   * Call invite handler. Creates a {@link (CallInvite:class)} from the info\n   * raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInvite = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInvite) {\n      throw new Error(\n        'Incorrect \"voice#callInvite\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(callInviteInfo, CallInvite.State.Pending);\n\n    this.emit(Voice.Event.CallInvite, callInvite);\n  };\n\n  /**\n   * Call invite accepted handler. Creates a {@link (CallInvite:class)} and a\n   * {@link (Call:class)} from the info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInviteAccepted = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInviteAccepted) {\n      throw new Error(\n        'Incorrect \"voice#callInviteAccepted\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(\n      callInviteInfo,\n      CallInvite.State.Accepted\n    );\n\n    const callInfo = {\n      uuid: callInviteInfo.uuid,\n      customParameters: callInviteInfo.customParameters,\n      sid: callInviteInfo.callSid,\n      from: callInviteInfo.from,\n      to: callInviteInfo.to,\n    };\n\n    const call = new Call(callInfo);\n\n    this.emit(Voice.Event.CallInviteAccepted, callInvite, call);\n  };\n\n  /**\n   * Call invite rejected handler. Creates a {@link (CallInvite:class)} from the\n   * info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCallInviteRejected = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInviteRejected) {\n      throw new Error(\n        'Incorrect \"voice#callInviteRejected\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { callInvite: callInviteInfo } = nativeVoiceEvent;\n\n    const callInvite = new CallInvite(\n      callInviteInfo,\n      CallInvite.State.Rejected\n    );\n\n    this.emit(Voice.Event.CallInviteRejected, callInvite);\n  };\n\n  /**\n   * Call invite cancelled handler. Creates a\n   * {@link (CancelledCallInvite:class)} from the info raised by the native\n   * layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleCancelledCallInvite = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventCallInviteCancelled) {\n      throw new Error(\n        'Incorrect \"voice#cancelledCallInvite\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const { cancelledCallInvite: cancelledCallInviteInfo, error: errorInfo } =\n      nativeVoiceEvent;\n\n    const error = new GenericError(errorInfo.message, errorInfo.code);\n\n    const cancelledCallInvite = new CancelledCallInvite(\n      cancelledCallInviteInfo\n    );\n\n    this.emit(Voice.Event.CancelledCallInvite, cancelledCallInvite, error);\n  };\n\n  /**\n   * Error event handler. Creates a {@link TwilioErrors.GenericError} from the\n   * info raised by the native layer and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleError = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventError) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      error: { code, message },\n    } = nativeVoiceEvent;\n\n    const error = new GenericError(message, code);\n\n    this.emit(Voice.Event.Error, error);\n  };\n\n  /**\n   * Registered event handler. Emits a\n   * {@link (Voice:namespace).Event.Registered} event.\n   */\n  private _handleRegistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventRegistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Registered);\n  };\n\n  /**\n   * Unregistered event handler. Emits a\n   * {@link (Voice:namespace).Event.Unregistered} event.\n   */\n  private _handleUnregistered = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventUnregistered) {\n      throw new Error(\n        'Incorrect \"voice#error\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    this.emit(Voice.Event.Unregistered);\n  };\n\n  /**\n   * Audio devices updated event handler. Generates a new list of\n   * {@link (AudioDevice:class) | AudioDevice objects} and emits it.\n   * @param nativeVoiceEvent - A `Voice` event directly from the native layer.\n   */\n  private _handleAudioDevicesUpdated = (nativeVoiceEvent: NativeVoiceEvent) => {\n    if (nativeVoiceEvent.type !== Constants.VoiceEventAudioDevicesUpdated) {\n      throw new Error(\n        'Incorrect \"voice#audioDevicesUpdated\" handler called for type ' +\n          `\"${nativeVoiceEvent.type}\".`\n      );\n    }\n\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = nativeVoiceEvent;\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice = new AudioDevice(selectedDeviceInfo);\n\n    this.emit(Voice.Event.AudioDevicesUpdated, audioDevices, selectedDevice);\n  };\n\n  /**\n   * Create an outgoing call.\n   *\n   * @remarks\n   * Note that the resolution of the returned `Promise` does not imply any call\n   * event occurring, such as answered or rejected.\n   *\n   * @param token - A Twilio Access Token, usually minted by an\n   * authentication-gated endpoint using a Twilio helper library.\n   * @param params - Custom parameters to send to the TwiML Application.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a call when the call is created.\n   */\n  async connect(\n    token: string,\n    params: Record<string, any> = {}\n  ): Promise<Call> {\n    const callInfo = await NativeModule.voice_connect(token, params);\n\n    const call = new Call(callInfo);\n\n    return call;\n  }\n\n  /**\n   * Get the version of the native SDK. Note that this is not the version of the\n   * React Native SDK, this is the version of the mobile SDK that the RN SDK is\n   * utilizing.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a string representing the version of the native SDK.\n   */\n  getVersion(): Promise<string> {\n    return NativeModule.voice_getVersion();\n  }\n\n  /**\n   * Get the Device token from the native layer.\n   * @returns a Promise that resolves with a string representing the Device\n   * token.\n   */\n  getDeviceToken(): Promise<string> {\n    return NativeModule.voice_getDeviceToken();\n  }\n\n  /**\n   * Get a list of existing calls, ongoing and pending. This will not return any\n   * call that has finished.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (Call:class)}s.\n   */\n  async getCalls(): Promise<ReadonlyMap<Uuid, Call>> {\n    const callInfos = await NativeModule.voice_getCalls();\n    const callsMap = new Map<Uuid, Call>(\n      callInfos.map((callInfo: NativeCallInfo) => [\n        callInfo.uuid,\n        new Call(callInfo),\n      ])\n    );\n    return callsMap;\n  }\n\n  /**\n   * Get a list of pending call invites.\n   *\n   * @remarks\n   * This list will not contain any call invites that have been \"settled\"\n   * (answered or rejected).\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a mapping of `Uuid`s to {@link (CallInvite:class)}s.\n   */\n  async getCallInvites(): Promise<ReadonlyMap<Uuid, CallInvite>> {\n    const callInviteInfos = await NativeModule.voice_getCallInvites();\n    const callInvitesMap = new Map<Uuid, CallInvite>(\n      callInviteInfos.map((callInviteInfo: NativeCallInviteInfo) => [\n        callInviteInfo.uuid,\n        new CallInvite(callInviteInfo, CallInvite.State.Pending),\n      ])\n    );\n    return callInvitesMap;\n  }\n\n  /**\n   * Register this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been registered.\n   */\n  register(token: string): Promise<void> {\n    return NativeModule.voice_register(token);\n  }\n\n  /**\n   * Unregister this device for incoming calls.\n   * @param token - A Twilio Access Token.\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the device has been unregistered.\n   */\n  unregister(token: string): Promise<void> {\n    return NativeModule.voice_unregister(token);\n  }\n\n  /**\n   * Get audio device information from the native layer.\n   * @returns\n   * A `Promise` that\n   *  - Resolves with a list of the native device's audio devices and the\n   *    currently selected device.\n   */\n  async getAudioDevices(): Promise<{\n    audioDevices: AudioDevice[];\n    selectedDevice: AudioDevice | null;\n  }> {\n    const {\n      audioDevices: audioDeviceInfos,\n      selectedDevice: selectedDeviceInfo,\n    } = await NativeModule.voice_getAudioDevices();\n\n    const audioDevices = audioDeviceInfos.map(\n      (audioDeviceInfo: NativeAudioDeviceInfo) =>\n        new AudioDevice(audioDeviceInfo)\n    );\n\n    const selectedDevice = new AudioDevice(selectedDeviceInfo);\n\n    return { audioDevices, selectedDevice };\n  }\n\n  /**\n   * Show the native AV route picker.\n   *\n   * @remarks\n   * This API is specific to iOS and unavailable in Android. If this API is\n   * invoked on Android, there will be no operation and the returned `Promise`\n   * will immediately resolve with `null`.\n   *\n   * @returns\n   * A `Promise` that\n   *  - Resolves when the AV Route Picker View is shown.\n   */\n  showAvRoutePickerView(): Promise<void> {\n    return NativeModule.voice_showNativeAvRoutePicker();\n  }\n}\n\n/**\n * Provides enumerations and types used by {@link (Voice:class)\n * | Voice objects}.\n *\n * @remarks\n * - See also the {@link (Voice:class) | Voice class}.\n * - See also the {@link (Voice:interface) | Voice interface}.\n *\n * @public\n */\nexport namespace Voice {\n  /**\n   * Enumeration of all event strings emitted by {@link (Voice:class)} objects.\n   */\n  export enum Event {\n    /**\n     * Raised when there is a change in available audio devices.\n     * See {@link (Voice:interface).(addEventListener:2)\n     * | Voice.addEventListener(AudioDevicesUpdated)}.\n     */\n    'AudioDevicesUpdated' = 'audioDevicesUpdated',\n    /**\n     * Raised when there is an incoming call invite.\n     * See {@link (Voice:interface).(addEventListener:3)\n     * | Voice.addEventListener(CallInvite)}.\n     */\n    'CallInvite' = 'callInvite',\n    /**\n     * Raised when an incoming call invite has been accepted.\n     * This event can be raised either through the SDK or outside of the SDK\n     * (i.e. through native UI/UX such as push notifications).\n     * See {@link (Voice:interface).(addEventListener:4)\n     * | Voice.addEventListener(CallInviteAccepted)}.\n     */\n    'CallInviteAccepted' = 'callInviteAccepted',\n    /**\n     * Raised when an incoming call invite has been rejected.\n     * This event can be raised either through the SDK or outside of the SDK\n     * (i.e. through native UI/UX such as push notifications).\n     * See {@link (Voice:interface).(addEventListener:5)\n     * | Voice.addEventListener(CallInviteRejected)}.\n     */\n    'CallInviteRejected' = 'callInviteRejected',\n    /**\n     * Raised when an incoming call invite has been cancelled, thus invalidating\n     * the associated call invite.\n     * See {@link (Voice:interface).(addEventListener:6)\n     * | Voice.addEventListener(CancelledCallInvite)}.\n     */\n    'CancelledCallInvite' = 'cancelledCallInvite',\n    /**\n     * Raised when the SDK encounters an error.\n     * See {@link (Voice:interface).(addEventListener:7)\n     * | Voice.addEventListener(Error)}.\n     */\n    'Error' = 'error',\n    /**\n     * Raised when the SDK is registered for incoming calls.\n     * See {@link (Voice:interface).(addEventListener:8)\n     * | Voice.addEventListener(Registered)}.\n     */\n    'Registered' = 'registered',\n    /**\n     * Raised when the SDK is unregistered for incoming calls.\n     * See {@link (Voice:interface).(addEventListener:9)\n     * | Voice.addEventListener(Unregistered)}.\n     */\n    'Unregistered' = 'unregistered',\n  }\n\n  /**\n   * Listener types for all events emitted by a {@link (Voice:class)\n   * | Voice object.}\n   */\n  export namespace Listener {\n    /**\n     * Generic event listener. This should be the function signature of any\n     * event listener bound to any voice event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:1)}.\n     */\n    export type Generic = (...args: any[]) => void;\n\n    /**\n     * Audio devices updated event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.AudioDevicesUpdated} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:2)}.\n     */\n    export type AudioDevicesUpdated = (\n      audioDevices: AudioDevice[],\n      selectedDevice: AudioDevice | null\n    ) => void;\n\n    /**\n     * Call invite event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.CallInvite} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:3)}.\n     */\n    export type CallInvite = (callInvite: CallInvite) => void;\n\n    /**\n     * Call invite accepted event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.CallInviteAccepted} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:4)}.\n     */\n    export type CallInviteAccepted = (\n      callInvite: CallInvite,\n      call: Call\n    ) => void;\n\n    /**\n     * Call invite rejected event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.CallInviteRejected} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:5)}.\n     */\n    export type CallInviteRejected = (callInvite: CallInvite) => void;\n\n    /**\n     * Call invite cancelled event listener. This should be the function\n     * signature of an event listener bound to the\n     * {@link (Voice:namespace).Event.CancelledCallInvite} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:6)}.\n     */\n    export type CancelledCallInvite = (\n      cancelledCallInvite: CancelledCallInvite,\n      error?: GenericError\n    ) => void;\n\n    /**\n     * Error event listener. This should be the function signature of an event\n     * listener bound to the\n     * {@link (Voice:namespace).Event.Error} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:7)}.\n     */\n    export type Error = (error: GenericError) => void;\n\n    /**\n     * Registered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Registered} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:7)}.\n     */\n    export type Registered = () => void;\n\n    /**\n     * Unregistered event listener. This should be the function signature of an\n     * event listener bound to the\n     * {@link (Voice:namespace).Event.Unregistered} event.\n     *\n     * @remarks\n     * See {@link (Voice:interface).(addEventListener:8)}.\n     */\n    export type Unregistered = () => void;\n  }\n}\n"]}