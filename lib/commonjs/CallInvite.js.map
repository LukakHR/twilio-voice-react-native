{"version":3,"sources":["CallInvite.tsx"],"names":["CallInvite","constructor","uuid","callSid","customParameters","from","to","state","_uuid","_callSid","_customParameters","_from","_to","_state","accept","options","State","Pending","InvalidStateError","callInfo","NativeModule","callInvite_accept","call","Call","reject","callInvite_reject","isValid","callInvite_isValid","getCallSid","getCustomParameters","getFrom","getState","getTo"],"mappings":"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","sourcesContent":["/**\n * Copyright Â© 2022 Twilio, Inc. All rights reserved. Licensed under the Twilio\n * license.\n *\n * See LICENSE in the project root for license information.\n */\n\nimport { Call } from './Call';\nimport { NativeModule } from './common';\nimport { InvalidStateError } from './error/InvalidStateError';\nimport type { NativeCallInviteInfo } from './type/CallInvite';\nimport type { CustomParameters, Uuid } from './type/common';\n\n/**\n * Provides access to information about a call invite, including the call\n * parameters, and exposes functionality to accept or decline a call.\n *\n * @remarks\n *\n * Note that when a `CallInvite` is acted upon (i.e. when\n * {@link (CallInvite:class).accept} or {@link (CallInvite:class).reject} is\n * invoked), then the `CallInvite` is \"settled\".\n *\n * The state of the `CallInvite` is changed from\n * {@link (CallInvite:namespace).State.Pending} to\n * {@link (CallInvite:namespace).State.Accepted} or\n * {@link (CallInvite:namespace).State.Rejected} and the `CallInvite` can no\n * longer be acted upon further.\n *\n * Further action after \"settling\" a `CallInvite` will throw an error.\n *\n *  - See the {@link (CallInvite:namespace) | CallInvite namespace} for\n *    enumerations and types used by this class.\n *\n * @public\n */\nexport class CallInvite {\n  /**\n   * The current state of the call invite.\n   *\n   * @remarks\n   * See {@link (CallInvite:namespace).State}.\n   */\n  private _state: CallInvite.State;\n  /**\n   * The `Uuid` of this call invite. Used to identify calls between the JS and\n   * native layer so we can associate events and native functionality between\n   * the layers.\n   */\n  private _uuid: Uuid;\n  /**\n   * A string representing the SID of this call.\n   */\n  private _callSid: string;\n  /**\n   * Call custom parameters.\n   */\n  private _customParameters: CustomParameters;\n  /**\n   * Call `from` parameter.\n   */\n  private _from: string;\n  /**\n   * Call `to` parameter.\n   */\n  private _to: string;\n\n  /**\n   * These objects should not be instantiated by consumers of the SDK. All\n   * instances of the `CallInvite` class should be emitted by the SDK.\n   *\n   * @param nativeCallInviteInfo - A dataobject containing the native\n   * information of a call invite.\n   * @param state - Mocking options for testing.\n   *\n   * @internal\n   */\n  constructor(\n    { uuid, callSid, customParameters, from, to }: NativeCallInviteInfo,\n    state: CallInvite.State\n  ) {\n    this._uuid = uuid;\n    this._callSid = callSid;\n    this._customParameters = { ...customParameters };\n    this._from = from;\n    this._to = to;\n\n    this._state = state;\n  }\n\n  /**\n   * Accept a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Accepted}.\n   * @param options - Options to pass to the native layer when accepting the\n   * call.\n   * @returns\n   *  - Resolves when a {@link (Call:class) | Call object} associated with this\n   *    {@link (CallInvite:class)} has been created.\n   */\n  async accept(options: CallInvite.AcceptOptions = {}): Promise<Call> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    const callInfo = await NativeModule.callInvite_accept(this._uuid, options);\n\n    const call = new Call(callInfo);\n\n    return call;\n  }\n\n  /**\n   * Reject a call invite. Sets the state of this call invite to\n   * {@link (CallInvite:namespace).State.Rejected}.\n   * @returns\n   *  - Resolves when the {@link (CallInvite:class)} has been rejected.\n   */\n  async reject(): Promise<void> {\n    if (this._state !== CallInvite.State.Pending) {\n      throw new InvalidStateError(\n        `Call in state \"${this._state}\", ` +\n          `expected state \"${CallInvite.State.Pending}\".`\n      );\n    }\n\n    await NativeModule.callInvite_reject(this._uuid);\n  }\n\n  /**\n   * Check if a `CallInvite` is valid.\n   *\n   * @returns\n   *  - TODO\n   *\n   * @alpha\n   */\n  isValid(): Promise<boolean> {\n    return NativeModule.callInvite_isValid(this._uuid);\n  }\n\n  /**\n   * Get the call SID associated with this `CallInvite` class.\n   * @returns - A string representing the call SID.\n   */\n  getCallSid(): string {\n    return this._callSid;\n  }\n\n  /**\n   * Get the custom parameters of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `Record` of custom parameters.\n   */\n  getCustomParameters(): CustomParameters {\n    return this._customParameters;\n  }\n\n  /**\n   * Get the `from` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `from` parameter.\n   */\n  getFrom(): string {\n    return this._from;\n  }\n\n  /**\n   * Get the `state` of the `CallInvite`.\n   * @returns - The `state` of this `CallInvite`.\n   */\n  getState(): CallInvite.State {\n    return this._state;\n  }\n\n  /**\n   * Get the `to` parameter of the call associated with this `CallInvite`\n   * class.\n   * @returns - A `string` representing the `to` parameter.\n   */\n  getTo(): string {\n    return this._to;\n  }\n}\n\n/**\n * Provides enumerations and types used by a {@link (CallInvite:class)\n * | CallInvite object}.\n *\n * @remarks\n *  - See also the {@link (CallInvite:class) | CallInvite class}.\n *\n * @public\n */\nexport namespace CallInvite {\n  /**\n   * Options to pass to the native layer when accepting the call.\n   */\n  export interface AcceptOptions {}\n\n  /**\n   * An enumeration of {@link (CallInvite:class)} states.\n   */\n  export enum State {\n    Pending = 'pending',\n    Accepted = 'accepted',\n    Rejected = 'rejected',\n  }\n}\n"]}